remDr <- rD[["client"]]
remDr$navigate(vaccine_2)
Sys.sleep(5) # give the page time to fully load
html <- remDr$getPageSource()[[1]]
signals <- read_html(html) %>% # parse HTML
html_nodes("table.vaccine-table bottom") %>% # extract table nodes with class = "tbl_mapReception"
.[3] %>% # keep the third of these tables
.[[1]] %>% # keep the first element of this list
html_table(fill=T) # have rvest turn it into a dataframe
signals <- read_html(html) %>% # parse HTML
html_nodes("table.vaccine-table bottom")# extract table nodes with class
html_table(fill=T) # have rvest turn it into a dataframe
html
ca_table2 <- html %>%
read_html() %>%
html_table(fill = T)
ca_table2 <- html %>%
read_html() %>%
html_table(fill = T)
# how many tables
length(ca_table2)
ca_table <- ca_table[[2]]
ca_table2 <- ca_table2[[2]]
head(ca_table2)
ca_table2 %>% select(-c(2,8))
names(ca_table2) <- c('Province', 'Percent_of_population_Vaccined', 'First_doses', 'Second_doses',
'Recieved_from_manufacturer', 'Received_doses_administered')
head(ca_table2)
ca_table2 <- html %>%
read_html() %>%
html_table(fill = T)
# how many tables
length(ca_table2)
ca_table2 <- ca_table2[[2]]
head(ca_table2)
ca_table2 <- select(ca_table2,-c(2,8))
names(ca_table2) <- c('Province', 'Percent_of_population_Vaccined', 'First_doses', 'Second_doses',
'Recieved_from_manufacturer', 'Received_doses_administered')
head(ca_table2)
ca_vaccine2 <- ca_table2 %>%
mutate_at(vars('Province', 'Percent_of_population_Vaccined', 'First_doses', 'Second_doses',
'Recieved_from_manufacturer', 'Received_doses_administered'),
funs(as.numeric(gsub(',', '', .))))
ca_vaccine2
ca_vaccine2 <- ca_table2 %>%
mutate_at(vars('First_doses', 'Second_doses', 'Recieved_from_manufacturer'),
funs(as.numeric(gsub(',', '', .))))
ca_vaccine2
write_csv(ca_vaccine2, "vaccine_distribution2.csv")
## Data_1
vaccine_1 <- 'https://www.canada.ca/en/public-health/services/diseases/2019-novel-coronavirus-infection/prevention-risks/covid-19-vaccine-treatment/vaccine-rollout.html'
ca_table <- vaccine_1 %>%
read_html() %>%
html_table(fill = T)
# how many tables
length(ca_table)
ca_table <- ca_table[[1]]
head(ca_table)
names(ca_table) <- c('Province', 'BioNTech', 'Moderna', 'Total')
ca_table
names(ca_table) <- c('Province', 'BioNTech', 'Moderna', 'Total')
head(ca_table)
ca_table <- head(ca_table,-2)
ca_table
ca_row1 <- ca_table[1]
ca_row1 <- ca_table[,1]
ca_row1 <- ca_table[1,]
View(ca_row1)
View(ca_row1)
ca_row1 <- ca_table[[1]]
ca_row1 <- ca_table[[1]]
ca_row1
ca_row1 <- ca_table[1,1]
ca_row1
ca_table[1,1] <- 'Canada'
ca_row1
ca_vaccine <- ca_table %>%
mutate_at(vars('BioNTech', 'Moderna', 'Total'),
funs(as.numeric(gsub(',', '', .))))
ca_vaccine
write_csv(ca_vaccine, "vaccine_distribution.csv")
library(flexdashboard)
library(leaflet)
library(maps)
library(raster)
library(sp)
library(rgdal)
# CA = map("world", "Canada")
# CA_provinces <- getData(country="Canada", level=1)
#
# leaflet(data = CA_provinces) %>% addTiles() %>%
#   addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
# if (!file.exists("./src/ref/ne_50m_admin_1_states_provinces_lakes/ne_50m_admin_1_states_provinces_lakes.dbf")){
#   download.file(file.path('http://www.naturalearthdata.com/http/',
#                           'www.naturalearthdata.com/download/50m/cultural',
#                           'ne_50m_admin_1_states_provinces_lakes.zip'),
#                 f <- tempfile())
#   unzip(f, exdir = "./src/ref/ne_50m_admin_1_states_provinces_lakes")
#   rm(f)
# }
#
# region <- readOGR("./src/ref/ne_50m_admin_1_states_provinces_lakes", 'ne_50m_admin_1_states_provinces_lakes', encoding='UTF-8')
#
#
# leaflet() %>%
#   addTiles() %>%
#   setView(-74.09, 45.7,  zoom = 3) %>%
#   addPolygons(data = subset(region, name %in% c("British Columbia", "Alberta", "Saskatchewan", "Manitoba", "Ontario", "Quebec", "New Brunswick", "Prince Edward Island", "Nova Scotia", "Newfoundland and Labrador", "Yukon", "Northwest Territories", "Nunavut")),
#               fillColor = topo.colors(10, alpha = NULL),
#               weight = 1)# if (!file.exists("./src/ref/ne_50m_admin_1_states_provinces_lakes/ne_50m_admin_1_states_provinces_lakes.dbf")){
#   download.file(file.path('http://www.naturalearthdata.com/http/',
#                           'www.naturalearthdata.com/download/50m/cultural',
#                           'ne_50m_admin_1_states_provinces_lakes.zip'),
#                 f <- tempfile())
#   unzip(f, exdir = "./src/ref/ne_50m_admin_1_states_provinces_lakes")
#   rm(f)
# }
#
# region <- readOGR("./src/ref/ne_50m_admin_1_states_provinces_lakes", 'ne_50m_admin_1_states_provinces_lakes', encoding='UTF-8')
#
#
# leaflet() %>%
#   addTiles() %>%
#   setView(-74.09, 45.7,  zoom = 3) %>%
#   addPolygons(data = subset(region, name %in% c("British Columbia", "Alberta", "Saskatchewan", "Manitoba", "Ontario", "Quebec", "New Brunswick", "Prince Edward Island", "Nova Scotia", "Newfoundland and Labrador", "Yukon", "Northwest Territories", "Nunavut")),
#               fillColor = topo.colors(10, alpha = NULL),
#               weight = 1)
canada <- getData("GADM",country="CAN",level=1)
leaflet(data = canada) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
library(flexdashboard)
library(leaflet)
library(maps)
library(raster)
library(sp)
library(rgdal)
# CA = map("world", "Canada")
# CA_provinces <- getData(country="Canada", level=1)
#
# leaflet(data = CA_provinces) %>% addTiles() %>%
#   addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
# if (!file.exists("./src/ref/ne_50m_admin_1_states_provinces_lakes/ne_50m_admin_1_states_provinces_lakes.dbf")){
#   download.file(file.path('http://www.naturalearthdata.com/http/',
#                           'www.naturalearthdata.com/download/50m/cultural',
#                           'ne_50m_admin_1_states_provinces_lakes.zip'),
#                 f <- tempfile())
#   unzip(f, exdir = "./src/ref/ne_50m_admin_1_states_provinces_lakes")
#   rm(f)
# }
#
# region <- readOGR("./src/ref/ne_50m_admin_1_states_provinces_lakes", 'ne_50m_admin_1_states_provinces_lakes', encoding='UTF-8')
#
#
# leaflet() %>%
#   addTiles() %>%
#   setView(-74.09, 45.7,  zoom = 3) %>%
#   addPolygons(data = subset(region, name %in% c("British Columbia", "Alberta", "Saskatchewan", "Manitoba", "Ontario", "Quebec", "New Brunswick", "Prince Edward Island", "Nova Scotia", "Newfoundland and Labrador", "Yukon", "Northwest Territories", "Nunavut")),
#               fillColor = topo.colors(10, alpha = NULL),
#               weight = 1)# if (!file.exists("./src/ref/ne_50m_admin_1_states_provinces_lakes/ne_50m_admin_1_states_provinces_lakes.dbf")){
#   download.file(file.path('http://www.naturalearthdata.com/http/',
#                           'www.naturalearthdata.com/download/50m/cultural',
#                           'ne_50m_admin_1_states_provinces_lakes.zip'),
#                 f <- tempfile())
#   unzip(f, exdir = "./src/ref/ne_50m_admin_1_states_provinces_lakes")
#   rm(f)
# }
#
# region <- readOGR("./src/ref/ne_50m_admin_1_states_provinces_lakes", 'ne_50m_admin_1_states_provinces_lakes', encoding='UTF-8')
#
#
# leaflet() %>%
#   addTiles() %>%
#   setView(-74.09, 45.7,  zoom = 3) %>%
#   addPolygons(data = subset(region, name %in% c("British Columbia", "Alberta", "Saskatchewan", "Manitoba", "Ontario", "Quebec", "New Brunswick", "Prince Edward Island", "Nova Scotia", "Newfoundland and Labrador", "Yukon", "Northwest Territories", "Nunavut")),
#               fillColor = topo.colors(10, alpha = NULL),
#               weight = 1)
# canada <- getData("GADM",country="CAN",level=1)
# leaflet(data = canada) %>% addTiles() %>%
#    addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
m <- leaflet() %>%
addTiles()%>%  # Add default OpenStreetMap map tiles
setView(-74.09, 45.7,  zoom = 3)
m
library(leaflet)
library(maps)
library(raster)
library(sp)
library(rgdal)
# CA = map("world", "Canada")
# CA_provinces <- getData(country="Canada", level=1)
#
# leaflet(data = CA_provinces) %>% addTiles() %>%
#   addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
# if (!file.exists("./src/ref/ne_50m_admin_1_states_provinces_lakes/ne_50m_admin_1_states_provinces_lakes.dbf")){
#   download.file(file.path('http://www.naturalearthdata.com/http/',
#                           'www.naturalearthdata.com/download/50m/cultural',
#                           'ne_50m_admin_1_states_provinces_lakes.zip'),
#                 f <- tempfile())
#   unzip(f, exdir = "./src/ref/ne_50m_admin_1_states_provinces_lakes")
#   rm(f)
# }
#
# region <- readOGR("./src/ref/ne_50m_admin_1_states_provinces_lakes", 'ne_50m_admin_1_states_provinces_lakes', encoding='UTF-8')
#
#
# leaflet() %>%
#   addTiles() %>%
#   setView(-74.09, 45.7,  zoom = 3) %>%
#   addPolygons(data = subset(region, name %in% c("British Columbia", "Alberta", "Saskatchewan", "Manitoba", "Ontario", "Quebec", "New Brunswick", "Prince Edward Island", "Nova Scotia", "Newfoundland and Labrador", "Yukon", "Northwest Territories", "Nunavut")),
#               fillColor = topo.colors(10, alpha = NULL),
#               weight = 1)# if (!file.exists("./src/ref/ne_50m_admin_1_states_provinces_lakes/ne_50m_admin_1_states_provinces_lakes.dbf")){
#   download.file(file.path('http://www.naturalearthdata.com/http/',
#                           'www.naturalearthdata.com/download/50m/cultural',
#                           'ne_50m_admin_1_states_provinces_lakes.zip'),
#                 f <- tempfile())
#   unzip(f, exdir = "./src/ref/ne_50m_admin_1_states_provinces_lakes")
#   rm(f)
# }
#
# region <- readOGR("./src/ref/ne_50m_admin_1_states_provinces_lakes", 'ne_50m_admin_1_states_provinces_lakes', encoding='UTF-8')
#
#
# leaflet() %>%
#   addTiles() %>%
#   setView(-74.09, 45.7,  zoom = 3) %>%
#   addPolygons(data = subset(region, name %in% c("British Columbia", "Alberta", "Saskatchewan", "Manitoba", "Ontario", "Quebec", "New Brunswick", "Prince Edward Island", "Nova Scotia", "Newfoundland and Labrador", "Yukon", "Northwest Territories", "Nunavut")),
#               fillColor = topo.colors(10, alpha = NULL),
#               weight = 1)
# canada <- getData("GADM",country="CAN",level=1)
# leaflet(data = canada) %>% addTiles() %>%
#    addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
m <- leaflet() %>%
addTiles()%>%  # Add default OpenStreetMap map tiles
setView(-74.09, 45.7,  zoom = 3)
m
install.packages("jsonlite")
install.packages("jsonlite")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(rvest)
library(tidyverse)
library(dplyr)
library(knitr)
library(RSelenium)
## Data_1
vaccine_1 <- 'https://www.canada.ca/en/public-health/services/diseases/2019-novel-coronavirus-infection/prevention-risks/covid-19-vaccine-treatment/vaccine-rollout.html'
ca_table <- vaccine_1 %>%
read_html() %>%
html_table(fill = T)
# how many tables
length(ca_table)
ca_table <- ca_table[[1]]
head(ca_table)
names(ca_table) <- c('Province', 'BioNTech', 'Moderna', 'Total')
head(ca_table)
ca_table <- head(ca_table,-2)
ca_table
ca_table[1,1] <- 'Canada'
ca_vaccine <- ca_table %>%
mutate_at(vars('BioNTech', 'Moderna', 'Total'),
funs(as.numeric(gsub(',', '', .))))
ca_vaccine
write_csv(ca_vaccine, "vaccine_distribution.csv")
## Data_2
vaccine_2 <- 'https://www.ctvnews.ca/health/coronavirus/coronavirus-vaccine-tracker-how-many-people-in-canada-have-received-shots-1.5247509?fbclid=IwAR3HMQewAhl4fmp8SisM6Pdq-xQN-hG9sa0Q9C1ugzqlNa8UZNGblDHGBcA'
rD <- rsDriver(browser="firefox", port=1998L, verbose=F)
remDr <- rD[["client"]]
remDr$navigate(vaccine_2)
Sys.sleep(5) # give the page time to fully load
html <- remDr$getPageSource()[[1]]
ca_table2 <- html %>%
read_html() %>%
html_table(fill = T)
# how many tables
length(ca_table2)
ca_table2 <- ca_table2[[2]]
head(ca_table2)
ca_table2 <- select(ca_table2,-c(2,8))
names(ca_table2) <- c('Province', 'Percent_of_population_Vaccined', 'First_doses', 'Second_doses',
'Recieved_from_manufacturer', 'Received_doses_administered')
head(ca_table2)
ca_vaccine2 <- ca_table2 %>%
mutate_at(vars('First_doses', 'Second_doses', 'Recieved_from_manufacturer'),
funs(as.numeric(gsub(',', '', .))))
ca_vaccine2
write_csv(ca_vaccine2, "vaccine_distribution2.csv")
ca_province <- merge(ca_vaccine, ca_vaccine2, by='Province')
ca_province <- merge(ca_vaccine, ca_vaccine2, by='Province')
ca_province
View(ca_vaccine)
View(ca_vaccine)
View(ca_vaccine2)
View(ca_vaccine2)
View(ca_province)
View(ca_province)
ca_vaccine$Province
#ca_vaccine$Province[ca_vaccine$Province == '']
# ca_vaccine$Province
ca_vaccine$Province[ca_vaccine$Province == 'Newfoundland and  Labrador'] <- 'Newfoundland and Labrador'
ca_vaccine$Province[ca_vaccine$Province == 'Northwest  Territories'] <- 'Northwest Territories'
ca_vaccine$Province[ca_vaccine$Province == 'Prince Edward  Island'] <- 'Prince Edward Island'
write_csv(ca_vaccine, "vaccine_distribution.csv")
ca_province <- merge(ca_vaccine, ca_vaccine2, by='Province')
ca_province
vac_province <- merge(ca_vaccine, ca_vaccine2, by='Province')
vac_province
write_csv(vac_province, "vaccine_province.csv")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(rvest)
library(tidyverse)
library(dplyr)
library(knitr)
library(RSelenium)
library(rgdal)
ca_province <- rgdal::readOGR("canada_provinces.geojson")
View(ca_province)
View(ca_province)
ca_province$name
ca_data <- merge(x = ca_province, y = vac_province, by.x='name', by.y='Province')
ca_data <- merge(x = ca_province, y = vac_province, by.x='name', by.y='Province')
ca_data
ca_data <- merge(x = ca_province, y = vac_province, by.x='name', by.y='Province')
View(ca_data)
View(ca_data)
type(ca_data)
View(vac_province)
View(vac_province)
View(ca_data)
View(ca_data)
library(flexdashboard)
leaflet(ca_data) %>%
addTiles()%>%  # Add defaultmap tiles
setView(-74.09, 62,  zoom = 3) %>%
# addGeoJSON(province_geo)
addPolygons(weight = 1, stroke = TRUE, smoothFactor = 0.3, opacity = 1, fillOpacity = 0.8,
fillColor = ~pal(Total),
label = ~paste0(name, ": Total Vaccine Distributed ", formatC(Total, big.mark = ", "),
'<br/>', 'BioNTech: ', formatC(BioNTech, big.mark = ", "),
'<br/>', 'Moderna: ', formatC(Moderna, big.mark = ", ")),
# label = lapply(info, htmltools::HTML),
highlightOptions = highlightOptions(color = "white", weight = 1, bringToFront = TRUE)) %>%
addLegend(pal = pal, values = ~Total, opacity = 0.8)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(rvest)
library(tidyverse)
library(dplyr)
library(knitr)
library(RSelenium)
library(rgdal)
ca_vaccine <- read.csv("vaccine_distribution.csv")
ca_vaccine2 <- read.csv("vaccine_distribution2.csv")
vac_province <- merge(ca_vaccine, ca_vaccine2, by='Province')
vac_province[vac_province$Second_doses == 0] <- NA
ca_vaccine <- read.csv("vaccine_distribution.csv")
ca_vaccine2 <- read.csv("vaccine_distribution2.csv")
vac_province <- merge(ca_vaccine, ca_vaccine2, by='Province')
vac_province
## Data_2
vaccine_2 <- 'https://www.ctvnews.ca/health/coronavirus/coronavirus-vaccine-tracker-how-many-people-in-canada-have-received-shots-1.5247509?fbclid=IwAR3HMQewAhl4fmp8SisM6Pdq-xQN-hG9sa0Q9C1ugzqlNa8UZNGblDHGBcA'
rD <- rsDriver(browser="firefox", port=1998L, verbose=F)
remDr <- rD[["client"]]
remDr$navigate(vaccine_2)
Sys.sleep(5) # give the page time to fully load
html <- remDr$getPageSource()[[1]]
ca_table2 <- html %>%
read_html() %>%
html_table(fill = T)
# how many tables
length(ca_table2)
ca_table2 <- ca_table2[[2]]
head(ca_table2)
ca_table2 <- select(ca_table2,-c(2,8))
names(ca_table2) <- c('Province', 'Percent_of_population_Vaccinated', 'First_doses', 'Second_doses',
'Recieved_from_manufacturer', 'Received_doses_administered')
head(ca_table2)
ca_vaccine2 <- ca_table2 %>%
mutate_at(vars('First_doses', 'Second_doses', 'Recieved_from_manufacturer'),
funs(as.numeric(gsub(',', '', .))))
ca_vaccine2
write_csv(ca_vaccine2, "vaccine_distribution2.csv")
ca_vaccine <- read.csv("vaccine_distribution.csv")
ca_vaccine2 <- read.csv("vaccine_distribution2.csv")
vac_province <- merge(ca_vaccine, ca_vaccine2, by='Province')
vac_province
write_csv(vac_province, "vaccine_province.csv")
ca_vaccine2 <- ca_table2 %>%
mutate_at(vars('First_doses', 'Second_doses', 'Recieved_from_manufacturer'),
funs(as.numeric(gsub(',', '', .))))
ca_vaccine2 <- ca_table2 %>%
mutate_at(vars('Percent_of_population_Vaccinated', 'Received_doses_administered'),
funs(as.numeric(sub("%","",x))/100))
ca_vaccine2 <- ca_table2 %>%
mutate_at(vars('First_doses', 'Second_doses', 'Recieved_from_manufacturer'),
funs(as.numeric(gsub(',', '', .))))
ca_vaccine2 <- ca_table2 %>%
mutate_at(vars('Percent_of_population_Vaccinated', 'Received_doses_administered'),
funs(as.numeric(sub("%",""))/100))
ca_vaccine2 <- ca_table2 %>%
mutate_at(vars('First_doses', 'Second_doses', 'Recieved_from_manufacturer'),
funs(as.numeric(gsub(',', '', .))))
ca_vaccine2 <- vaccine2 %>%
mutate_at(vars('Percent_of_population_Vaccinated', 'Received_doses_administered'),
funs(as.numeric(sub("%",""))/100))
ca_vaccine2 <- ca_table2 %>%
mutate_at(vars('First_doses', 'Second_doses', 'Recieved_from_manufacturer'),
funs(as.numeric(gsub(',', '', .))))
ca_vaccine2 <- ca_vaccine2 %>%
mutate_at(vars('Percent_of_population_Vaccinated', 'Received_doses_administered'),
funs(as.numeric(sub("%",""))/100))
ca_vaccine2 <- ca_table2 %>%
mutate_at(vars('First_doses', 'Second_doses', 'Recieved_from_manufacturer'),
funs(as.numeric(gsub(',', '', .))))
ca_vaccine2$Percent_of_population_Vaccinated <- as.numeric(sub("%","",ca_vaccine2$Percent_of_population_Vaccinated))/100
ca_vaccine2
ca_vaccine2 <- ca_table2 %>%
mutate_at(vars('First_doses', 'Second_doses', 'Recieved_from_manufacturer'),
funs(as.numeric(gsub(',', '', .))))
ca_vaccine2$Percent_of_population_Vaccinated <- as.numeric(sub("%","",ca_vaccine2$Percent_of_population_Vaccinated))/100
ca_vaccine2$Received_doses_administered <- as.numeric(sub("%","",ca_vaccine2$Received_doses_administered))/100
ca_vaccine2
write_csv(ca_vaccine2, "vaccine_distribution2.csv")
ca_vaccine <- read.csv("vaccine_distribution.csv")
ca_vaccine2 <- read.csv("vaccine_distribution2.csv")
vac_province <- merge(ca_vaccine, ca_vaccine2, by='Province')
vac_province
write_csv(vac_province, "vaccine_province.csv")
ca_vaccine2 <- ca_table2 %>%
mutate_at(vars('First_doses', 'Second_doses', 'Recieved_from_manufacturer'),
funs(as.numeric(gsub(',', '', .))))
ca_vaccine2$Percent_of_population_Vaccinated <- as.numeric(sub("%","",ca_vaccine2$Percent_of_population_Vaccinated))
ca_vaccine2$Received_doses_administered <- as.numeric(sub("%","",ca_vaccine2$Received_doses_administered))
ca_vaccine2
write_csv(ca_vaccine2, "vaccine_distribution2.csv")
ca_vaccine <- read.csv("vaccine_distribution.csv")
ca_vaccine2 <- read.csv("vaccine_distribution2.csv")
vac_province <- merge(ca_vaccine, ca_vaccine2, by='Province')
vac_province
write_csv(vac_province, "vaccine_province.csv")
ca_province <- rgdal::readOGR("canada_provinces.geojson")
ca_province$name
ca_data <- merge(x = ca_province, y = vac_province, by.x='name', by.y='Province')
View(vac_province)
View(vac_province)
x <- format(2132314.123, big.mark=",",scientific=FALSE)
x
typeof(x)
format(ca_data$Second_doses,big.mark=",",scientific=FALSE)
iszero <- function(x) {
for(val in x) {
if(val=="0") {
val<-"NA"
}
}
return(x)
}
iszero(format(ca_data$Second_doses,big.mark=",",scientific=FALSE))
format(ca_data$Second_doses,big.mark=",",scientific=FALSE)
as.numeric(format(ca_data$Second_doses,big.mark=",",scientific=FALSE))
iszero(ca_data$Second_doses)
format(ca_data$Second_doses,big.mark=",",scientific=FALSE)
typeof(format(ca_data$Second_doses,big.mark=",",scientific=FALSE))
as.numeric("123")
as.numeric("   123")
as.numeric("   0")
as.numeric(format(ca_data$Second_doses,big.mark=",",scientific=FALSE))
as.numeric("213,123")
iszero <- function(x) {
for(val in x) {
if(as.numeric(gsub(',', '', val))==0) {
val<-"NA"
}
}
return(x)
}
iszero(format(ca_data$Second_doses,big.mark=",",scientific=FALSE))
as.numeric(gsub(',', '', format(ca_data$Second_doses,big.mark=",",scientific=FALSE)))
as.numeric(gsub(',', '', format(ca_data$Second_doses,big.mark=",",scientific=FALSE)))==0
if (as.numeric(gsub(',', '', format(ca_data$Second_doses,big.mark=",",scientific=FALSE)))==0) {}
x <- format(ca_data$Second_doses,big.mark=",",scientific=FALSE)
x
for (val in x) {if(as.numeric(gsub(',', '', val))==0) {val<-NA}}
x
as.numeric(gsub(',', '', val))==0
as.numeric(gsub(',', '', val))==0
as.numeric(gsub(',', '', x))==0
iszero <- function(x) {
for(val in x) {
if(as.numeric(gsub(',', '', val))==0) {
val<-NA
}
}
print(x)
}
iszero(format(ca_data$Second_doses,big.mark=",",scientific=FALSE))
for(i in x) {}
for(i in x) {print(x)}
for(i in x) {print(1)}
for(i in x) {print(i)}
for(i in x) {if(as.numeric(gsub(',', '', i))==0){print(i)}}
for(i in x) {if(as.numeric(gsub(',', '', i))==0){i= 2;print(i)}}
for(i in x) {if(as.numeric(gsub(',', '', i))==0){i= NA;print(i)}}
iszero <- function(x) {
for(val in x) {
if(as.numeric(gsub(',', '', val))==0) {
val=NA
}
}
return(x)
}
iszero(format(ca_data$Second_doses,big.mark=",",scientific=FALSE))
x[2]
for(i in 10) {print(i)}
for(i in 1:10) {print(i)}
